{
  "heading" : {
    "en" : "Publications",
    "de" : "Publikationen" },

  "publications" : [
    { "key"       : "2016-small-multiples",
      "bibtex"    : "std2016-small-multiples.bib",
      "title"     : "Interactive Revision Exploration using Small Multiples of Software Maps",
      "date"      : "2016-02-28",
      "authors"   : [ "Willy Scheibel", "Matthias Trapp", "Jürgen Döllner" ],
      "published" : "Proceedings of the 7th International Conference on Information Visualization Theory and Applications (IVAPP 2016)",
      
      "caption"   : {
        "en" : "To explore and to compare different revisions of complex software systems is a challenging task as it requires
                to constantly switch between different revisions and the corresponding information visualization. This paper
                proposes to combine the concept of small multiples and focus+context techniques for software maps to facilitate
                the comparison of multiple software map themes and revisions simultaneously on a single screen. This
                approach reduces the amount of switches and helps to preserve the mental map of the user. Given a software
                project the small multiples are based on a common dataset but are specialized by specific revisions and themes.
                The small multiples are arranged in a matrix where rows and columns represents different themes and revisions,
                respectively. To ensure scalability of the visualization technique we also discuss two rendering pipelines
                to ensure interactive frame-rates. The capabilities of the proposed visualization technique are demonstrated in
                a collaborative exploration setting using a high-resolution, multi-touch display.",
        "de" : "Die Exploration und der Vergleich verschiedener Revisionen eines komplexen Softwaresystems ist eine komplizierte
                Aufgabe, da es einen ständigen Wechsel zwischen den Revisionen und den Visualisierungen erfordert. Diese
                Ausarbeitung stellt eine Kombination von Small Multiples, Focus+Context Techniken und Software Maps vor, die den
                Vergleich zwischen mehreren Software Map Themen und Revisionen gleichzeitig auf einem Bildschirm ermöglicht. Dieser
                Ansatz reduziert die Anzahl der benötigten Kontextwechsel für den Nutzer und ermöglicht die Erstellung einer mentalen
                Karte. Dabei werden die Small Multiples zu einem Softwaresystem über einen gemeinsamen Datensatz erstellt und in
                einer Matrix angeordnet, in der Zeilen und Spalten für die unterschiedlichen Themen und Revisionen stehen. Eine
                interaktive, skalierbare Visualierung ist über die Nutzung einer der zwei vorgestellten Renderingabläufe möglich.
                Weiterhin wir die Technik im Rahmen eines High-Resolution, Multi-Touch Display gezeigt und besprochen." },

      "thumbnail" : "2016-ivapp-small-multiples.png"
    },
    { "key"       : "2016-decl3d-treemaps",
      "bibtex"    : "lsld2016-decl3d-treemaps.bib",
      "title"     : "Dynamic 2.5D Treemaps using Declarative 3D on the Web",
      "date"      : "2016-07-23",
      "authors"   : [ "Daniel Limberger", "Willy Scheibel", "Stefan Lemme", "Jürgen Döllner" ],
      "published" : "Proceedings of the 21st International Conference on Web3D Technology (Web3D '16)",
      
      "caption"   : {
        "en" : "The 2.5D treemap represents a general purpose visualization technique to map multi-variate hierarchical data in
                a scalable, interactive, and consistent way used in a number of application fields. In this paper, we explore
                the capabilities of Declarative 3D for the web-based implementation of 2.5D treemap clients. Particularly, we
                investigate how X3DOM and XML3D can be used to implement clients with equivalent features that interactively
                display 2.5D treemaps with dynamic mapping of attributes. We also show a first step towards a glTF-based
                implementation. These approaches are benchmarked focusing on their interaction capabilities with respect to
                rendering and speed of dynamic data mapping. We discuss the results for our representative example of a complex
                3D interactive visualization technique and summerize recommendations for improvements towards operational web
                clients.",
        "de" : "Die 2.5D Treemap stellt eine grundlegende, skalierbare und interaktive Visualisierungstechnik für multi-variate
                hierarchische Daten dar. In dieser Ausarbeitung durchleuchten wir die Möglichkeiten von deklarativem 3D für
                webbasierte 2.5D Treemap Clients. Besonderes Augenmerk legen wir auf X3DOM und XML3D, indem wir Clients mit
                gleichem Featureumfang (u.a. dynamische Attributmappings) für interaktive 2.5D Treemaps vergleichen. Weiterhin
                zeigen wir erste Ansätze für die Nutzung von glTF. Alle Ansätze wurden bezüglich ihrer Prozessierungs- und
                Renderinggeschwindigkeit. Wir diskutieren die Ergebnisse für unser representatives Beispiel einer komplexen 3D
                Visualisierungstechnik und fassen Verbesserungsvorschläge für produktive Web-Clients zusammen." },

      "thumbnail" : "2016-web3d-decl3d-treemaps.png"
    },
    { "key"       : "2017-attributed-vertex-clouds",
      "bibtex"    : "sbtd2017-attributed-vertex-clouds.bib",
      "title"     : "Attributed Vertex Clouds",
      "date"      : "2017-03-14",
      "authors"   : [ "Willy Scheibel", "Stefan Buschmann", "Matthias Trapp", "Jürgen Döllner" ],
      "published" : "GPU Zen",
      
      "caption"   : {
        "en" : "In todays computer graphics applications, large 3D scenes are rendered
                which consist of polygonal geometries such as triangle meshes. Using state-
                of-the-art techniques, this geometry is often represented on the GPU using
                vertex and index buffers, as well as additional auxiliary data such as tex-
                tures or uniform buffers. For polygonal meshes of
                arbitrary complexity, the described approach is indispensable. However,
                there are several types of simpler geometries (e.g., cuboids, spheres, tubes,
                or splats) that can be generated procedurally. We present an efficient data representation and render-
                ing concept for such geometries, denoted as attributed vertex clouds (AVCs).
                Using this approach, geometry is generated on the GPU during execution
                of the programmable rendering pipeline. Each
                vertex is used as the argument for a function that procedurally generates
                the target geometry. This function is called a transfer function, and it is
                implemented using shader programs and therefore executed as part of the
                rendering process.
                This approach allows for compact geometry representation and results
                in reduced memory footprints in comparison to traditional representations.
                By shifting geometry generation to the GPU, the resulting
                volatile geometry can be controlled flexibly, i.e., its position, parameteri-
                zation, and even the type of geometry can be modified without requiring
                state changes or uploading new data to the GPU. Performance measurements
                suggests improved rendering times and reduced memory transmission through the rendering pipeline.",
        "de" : "In heutigen computergrafischen Anwendungen werde zumeist große 3D Szenen gerendert, die aus polygonalen Geometrien wie Dreiecksnetze bestehen.
                Mit State-of-the-Art Techniken wird diese Geometrie auf der GPU mittels Vertex- und Indexbuffern enkodiert.
                For Polygonnetze beliebiger Komplexität ist dieser Ansatz unumgänglich.
                Allerdings gibt es Geometrietypen einfacherer Struktur (z. B. Würfel, Kugeln, Röhren oder Flächen) welche prozedural generiert werden können.
                Wir präsentieren eine effiziente Datenrepräsentation und Renderingkonzept für solche Geometrien, Attributed Vertex Cloud (AVC) genannt.
                Mit diesem Ansatz wird die Geometrie während der Ausführung der Renderingpipeline auf der Grafikkarte berechnet.
                Jeder Vertex der Geometrie wird als Argument an eine Funktion übergeben, welche die Zielgeometrie erzeugt.
                Diese Funktion nennen wir Transfer-Funktion und sie ist in Shader-Programmen implementiert und wird somit als Teil des Rendering-Prozesses ausgeführt.
                Der Ansatz ermöglicht kompakte Speicherrepräsentation der Geometrie gegenüber existierenden Verfahren.
                Die Verschiebung der Geometrieerzeugung auf die GPU ermöglicht auch die Umsetzung von flüchtiger Geometrie, welche dynamisch konfigurierbar ist (z. B. Position oder Parameter, sogar der Typ ist änderbar).
                Messungen der Ausführungszeiten deuten auf eine Verschnellerung der Framezeiten und eine geringere Speicher-Fußabdruck bei Datenübertragungen zwischen den Shader-Stages der Renderingpipeline." },

      "thumbnail" : "2017-gpuzen-attributed-vertex-clouds.png"
    }
  ]

}
